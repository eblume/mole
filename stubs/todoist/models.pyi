from typing import Any, Optional

class Model:
    temp_id: str = ...
    data: Any = ...
    api: Any = ...
    def __init__(self, data: Any, api: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __contains__(self, value: Any): ...

class Collaborator(Model):
    def delete(self, project_id: Any) -> None: ...

class CollaboratorState(Model): ...

class Filter(Model):
    def update(self, **kwargs: Any) -> None: ...
    def delete(self) -> None: ...

class Item(Model):
    def update(self, **kwargs: Any) -> None: ...
    def delete(self) -> None: ...
    def move(self, **kwargs: Any) -> None: ...
    def reorder(self, child_order: Any) -> None: ...
    def close(self) -> None: ...
    def complete(self, date_completed: Optional[Any] = ...) -> None: ...
    def uncomplete(self) -> None: ...
    def archive(self) -> None: ...
    def unarchive(self) -> None: ...
    def update_date_complete(self, due: Optional[Any] = ...) -> None: ...

class Label(Model):
    def update(self, **kwargs: Any) -> None: ...
    def delete(self) -> None: ...

class LiveNotification(Model): ...

class GenericNote(Model):
    local_manager: Any = ...
    def update(self, **kwargs: Any) -> None: ...
    def delete(self) -> None: ...

class Note(GenericNote):
    local_manager: Any = ...
    def __init__(self, data: Any, api: Any) -> None: ...

class ProjectNote(GenericNote):
    local_manager: Any = ...
    def __init__(self, data: Any, api: Any) -> None: ...

class Project(Model):
    def update(self, **kwargs: Any) -> None: ...
    def delete(self) -> None: ...
    def archive(self) -> None: ...
    def unarchive(self) -> None: ...
    def move(self, parent_id: Any) -> None: ...
    def reorder(self, child_order: Any) -> None: ...
    def share(self, email: Any) -> None: ...
    def take_ownership(self) -> None: ...

class Reminder(Model):
    def update(self, **kwargs: Any) -> None: ...
    def delete(self) -> None: ...

class Section(Model):
    def update(self, **kwargs: Any) -> None: ...
    def delete(self) -> None: ...
    def move(self, project_id: Any) -> None: ...
    def reorder(self, section_order: Any) -> None: ...
    def archive(self, date_archived: Optional[Any] = ...) -> None: ...
    def unarchive(self) -> None: ...
