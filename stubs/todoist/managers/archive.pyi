from ..api import TodoistAPI as TodoistAPI
from ..models import Item as Item, Model as Model, Section as Section
from typing import Any, Dict, Iterator, Optional

class ArchiveManager:
    object_model: Any = ...
    api: Any = ...
    element_type: Any = ...
    def __init__(self, api: TodoistAPI, element_type: str) -> None: ...
    def next_page(self, cursor: Optional[str]) -> Dict: ...

class SectionsArchiveManagerMaker:
    api: Any = ...
    def __init__(self, api: Any) -> None: ...
    def for_project(self, project_id: Any): ...

class SectionsArchiveManager(ArchiveManager):
    object_model: Any = ...
    project_id: Any = ...
    def __init__(self, api: Any, project_id: Any) -> None: ...
    def sections(self) -> Iterator[Section]: ...

class ItemsArchiveManagerMaker:
    api: Any = ...
    def __init__(self, api: Any) -> None: ...
    def for_project(self, project_id: Any): ...
    def for_section(self, section_id: Any): ...
    def for_parent(self, parent_id: Any): ...

class ItemsArchiveManager(ArchiveManager):
    object_model: Any = ...
    project_id: Any = ...
    section_id: Any = ...
    parent_id: Any = ...
    def __init__(self, api: Any, project_id: Optional[Any] = ..., section_id: Optional[Any] = ..., parent_id: Optional[Any] = ...) -> None: ...
    def items(self) -> Iterator[Item]: ...
